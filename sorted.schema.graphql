directive @cacheControl(
  inheritMaxAge: Boolean

  maxAge: Int

  scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

# Indicates exactly one field must be supplied and this field must not be `null`.
directive @oneOf on INPUT_OBJECT

enum CacheControlScope {
  PUBLIC

  PRIVATE
}

# Optionally reverse the result sort order from `HEIGHT_DESC` (default) to `HEIGHT_ASC`.
enum SortOrder {
  # Results are sorted by the transaction block height in ascending order, with the oldest transactions appearing first, and the most recent and pending/unconfirmed appearing last.
  HEIGHT_ASC

  # Results are sorted by the transaction block height in descending order, with the most recent and unconfirmed/pending transactions appearing first.
  HEIGHT_DESC

  # Results are sorted by the transaction ingestion time in descending order, with the most recently ingested transactions appearing first.
  INGESTED_AT_DESC

  # Results are sorted by the transaction ingestion time in ascending order, with the oldest ingested transactions appearing first.
  INGESTED_AT_ASC
}

# The operator to apply to a tag value.
enum TagOperator {
  # Equal
  EQ

  # Not equal
  NEQ
}

# The method used to determine if tags match.
enum TagMatch {
  # An exact match
  EXACT

  # Fuzzy match containing all search terms
  FUZZY_AND

  # Fuzzy match containing at least one search term
  FUZZY_OR

  # A wildcard match
  WILDCARD
}

# Filter with a min and max
input RangeFilter {
  # Maximum integer to filter to
  max: Int

  # Minimum integer to filter from
  min: Int
}

# Find transactions with the following tag name and value
input TagFilter {
  # How tag names and values are matched. Defaults to EXACT.
  match: TagMatch! = EXACT

  # The tag name
  name: String

  # The operator to apply to to the tag filter. Defaults to EQ (equal).
  op: TagOperator! = EQ

  # An array of values to match against. If multiple values are passed then transactions with _any_ matching tag value from the set will be returned.
  #
  # e.g.
  #
  # `{name: "app-name", values: ["app-1"]}`
  #
  # Returns all transactions where the `app-name` tag has a value of `app-1`.
  #
  # `{name: "app-name", values: ["app-1", "app-2", "app-3"]}`
  #
  # Returns all transactions where the `app-name` tag has a value of either `app-1` _or_ `app-2` _or_ `app-3`.
  values: [String!]
}

# Representation of a value transfer between wallets, in both winson and ar.
type Amount {
  # Amount as an AR string e.g. \`"0.000000000001"\`.
  ar: String!

  # Amount as a winston string e.g. \`"1000000000000"\`.
  winston: String!
}

# Block Schema
type Block {
  # The block height.
  height: Int!

  # The block ID.
  id: ID

  # The previous block ID.
  previous: ID

  # The block timestamp (UTC).
  timestamp: Int
}

# Paginated result set using the GraphQL cursor spec,
# see: https://relay.dev/graphql/connections.htm.
type BlockConnection {
  edges: [BlockEdge!]!

  pageInfo: PageInfo!
}

# Paginated result set using the GraphQL cursor spec.
type BlockEdge {
  # The cursor value for fetching the next page.
  #
  # Pass this to the after parameter in blocks(after: $cursor), the next page will start from the next item after this.
  cursor: String!

  # A block object.
  node: Block!
}

# The data bundle containing the current data item.
# See: https://github.com/ArweaveTeam/arweave-standards/blob/master/ans/ANS-104.md.
type Bundle {
  # ID of the containing data bundle.
  id: ID!
}

# Basic metadata about the transaction data payload.
type MetaData {
  # Size of the associated data in bytes.
  size: String!

  # Type is derived from the \`content-type\` tag on a transaction.
  type: String
}

# Representation of a transaction owner.
type Owner {
  # The owner's wallet address.
  address: String!

  # The owner's public key as a base64url encoded string.
  key: String!
}

# Paginated page info using the GraphQL cursor spec.
type PageInfo {
  hasNextPage: Boolean!
}

# The parent transaction for bundled transactions,
# see: https://github.com/ArweaveTeam/arweave-standards/blob/master/ans/ANS-102.md.
type Parent {
  id: ID!
}

# Tag Schema
type Tag {
  # UTF-8 tag name
  name: String!

  # UTF-8 tag value
  value: String!
}

# Transaction Structure
type Transaction {
  anchor: String!

  # Transactions with a null block are recent and unconfirmed, if they aren't mined into a block within 60 minutes they will be removed from results.
  block: Block

  # For bundled data items this references the containing bundle ID.
  # See: https://github.com/ArweaveTeam/arweave-standards/blob/master/ans/ANS-104.md
  bundledIn: Bundle

  data: MetaData!

  fee: Amount!

  id: ID!

  # When this transaction was made available for querying
  ingested_at: Int

  owner: Owner!

  # @deprecated Don't use, kept for backwards compatability only!
  parent: Parent @deprecated(reason: "Use `bundledIn`")

  quantity: Amount!

  recipient: String!

  signature: String!

  tags: [Tag!]!
}

# Paginated result set using the GraphQL cursor spec,
# see: https://relay.dev/graphql/connections.htm.
type TransactionConnection {
  # The number of transactions that match this query.
  count: Int
  
  edges: [TransactionEdge!]!

  pageInfo: PageInfo!
}

# Paginated result set using the GraphQL cursor spec.
type TransactionEdge {
  # The cursor value for fetching the next page.
  #
  # Pass this to the `after` parameter in ` transactions(after: $cursor)`, the next page will start from the next item after this.
  cursor: String!

  # A transaction object.
  node: Transaction!
}

type Query {
  block(
    id: String
  ): Block

  blocks(
    # A pagination cursor value, for fetching subsequent pages from a result set.
    after: String

    # Result page size (max: 100)
    first: Int = 10

    # Find blocks within a given block height range.
    height: RangeFilter

    # Find blocks from a list of ids.
    ids: [ID!]

    # Optionally specify the result sort order.
    sort: SortOrder = HEIGHT_DESC
  ): BlockConnection!

  # Get a transaction by its id
  transaction(
    id: ID!
  ): Transaction

  # Get a paginated set of matching transactions using filters.
  transactions(
    # A pagination cursor value, for fetching subsequent pages from a result set.
    after: String

    # Find transactions within a given block height range.
    block: RangeFilter

    # Find data items from the given data bundles.
    # See: https://github.com/ArweaveTeam/arweave-standards/blob/master/ans/ANS-104.md
    bundledIn: [ID!]

    # Result page size (max: 100)
    first: Int = 10

    # Find transactions from a list of ids.
    ids: [ID!]

    # Find transactions within a given Search Indexing Service ingestion time range.
    ingested_at: RangeFilter

    # Find transactions from a list of owner wallet addresses, or wallet owner public keys.
    owners: [String!]

    # Find transactions from a list of recipient wallet addresses.
    recipients: [String!]

    # Optionally specify the result sort order.
    sort: SortOrder = HEIGHT_DESC

    # Find transactions using tags.
    tags: [TagFilter!]
  ): TransactionConnection!
}
